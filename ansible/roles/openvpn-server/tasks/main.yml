- name: Update apt packages
  apt:
    upgrade: yes

- name: Install openvpn
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - openvpn
    - openssl

- name: Check if CA dir exists
  stat:
    path: "{{ ansible_env.HOME }}/openvpn-ca"
  register: openvpn_ca_dir

- name: Download easy-rsa 3.1.7
  get_url:
    url: "https://github.com/OpenVPN/easy-rsa/releases/download/v3.1.7/EasyRSA-3.1.7.tgz"
    dest: "{{ ansible_env.HOME }}/EasyRSA-3.1.7.tgz"
  when: not openvpn_ca_dir.stat.exists

- name: Extract easy-rsa
  unarchive:
    src: "{{ ansible_env.HOME }}/EasyRSA-3.1.7.tgz"
    dest: "{{ ansible_env.HOME }}"
    remote_src: yes
  when: not openvpn_ca_dir.stat.exists

- name: Move easy-rsa to openvpn-ca
  command: mv "{{ ansible_env.HOME }}/EasyRSA-3.1.7" "{{ ansible_env.HOME }}/openvpn-ca"
  when: not openvpn_ca_dir.stat.exists

- name: Copy vars.example to vars
  command: cp "{{ ansible_env.HOME }}/openvpn-ca/vars.example" "{{ ansible_env.HOME }}/openvpn-ca/vars"

- name: Customize CA variable configuration
  lineinfile:
    dest: "{{ ansible_env.HOME }}/openvpn-ca/vars"
    regexp: "^{{ item.property | regex_escape() }}="
    line: "{{ item.property }}={{ item.value }}"
  with_items:
    - { property: "export KEY_NAME", value: '"server"' }
    - { property: "export KEY_COUNTRY", value: '"IT"' }
    - { property: "export KEY_PROVINCE", value: '"LE"' }
    - { property: "export KEY_CITY", value: '"LE"' }
    - { property: "export KEY_ORG", value: '"example"' }
    - { property: "export KEY_EMAIL", value: '"example@example.com"' }
    - { property: "export KEY_OU", value: '"example"' }
    - {
        property: "export KEY_CONFIG",
        value: "{{ ansible_env.HOME }}/openvpn-ca/openssl-1.0.0.cnf",
      }
    - {
        property: "export KEY_DIR",
        value: "{{ ansible_env.HOME }}/openvpn-ca/keys",
      }

- name: "EasyRSA init-pki"
  shell: >
    yes "yes" | ./easyrsa init-pki;
  args:
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "EasyRSA build-ca"
  shell: >
    yes "" | ./easyrsa build-ca nopass;
  args:
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "EasyRSA gen-dh"
  shell: >
    yes "yes" | ./easyrsa gen-dh;
  args:
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "EasyRSA build-server-full"
  shell: >
    yes "yes" | ./easyrsa build-server-full server nopass;
  args:
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "EasyRSA build-client-full"
  shell: >
    yes "yes" | ./easyrsa build-client-full client nopass;
  args:
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "EasyRSA gen-crl"
  shell: >
    yes "yes" | ./easyrsa gen-crl;
  args:
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: Openvpn --genkey --secret
  ansible.builtin.command:
    cmd: openvpn --genkey --secret {{ ansible_env.HOME }}/openvpn-ca/pki/ta.key

- name: "Copy key and certificates to /etc/openvpn"
  ansible.builtin.copy:
    remote_src: yes
    src: "{{ ansible_env.HOME }}/openvpn-ca/pki/{{ item }}"
    dest: /etc/openvpn/server/{{ item | basename }}
    mode: "0640"
  loop:
    - "ca.crt"
    - "dh.pem"
    - "ta.key"
    - "issued/server.crt"
    - "private/server.key"

- name: "Generate server.conf from template"
  template:
    src: assets/server.conf.j2
    dest: /etc/openvpn/server/server.conf

- name: Configuration IP forwarding
  become: true
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Add ufw before content
  become: true
  blockinfile:
    path: /etc/ufw/before.rules
    insertbefore: BOF
    content: |
      # NAT table rules
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE
      COMMIT

- name: Customize ufw forwarding policy
  become: true
  lineinfile:
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
    path: "/etc/default/ufw"
    regexp: '^DEFAULT_FORWARD_POLICY="DROP"'

- name: Open ufw ports for openvpn and ssh
  become: true
  shell: ufw allow openvpn && ufw allow OpenSSH

- name: Enable ufw
  become: true
  shell: ufw --force enable

- name: Start openvpn systemd service
  become: true
  systemd:
    name: openvpn-server@server
    state: started
    enabled: yes
